# coding: utf-8

"""
    Content Management

    The content management feed allows you to process content for items in bulk. You can take in content via the content feeds. Use the XSDs to manage content.

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from walmart_content_management_python_sdk import schemas  # noqa: F401


class FeedRecordResponseResultsItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Information about the individual feed
    """


    class MetaOapg:
        
        class properties:
            feedId = schemas.StrSchema
            feedSource = schemas.StrSchema
            feedType = schemas.StrSchema
            partnerId = schemas.StrSchema
            itemsReceived = schemas.Int64Schema
            itemsSucceeded = schemas.Int64Schema
            itemsFailed = schemas.Int64Schema
            itemsProcessing = schemas.Int64Schema
            feedStatus = schemas.StrSchema
            feedDate = schemas.DateTimeSchema
            batchId = schemas.StrSchema
            modifiedDtm = schemas.DateTimeSchema
            __annotations__ = {
                "feedId": feedId,
                "feedSource": feedSource,
                "feedType": feedType,
                "partnerId": partnerId,
                "itemsReceived": itemsReceived,
                "itemsSucceeded": itemsSucceeded,
                "itemsFailed": itemsFailed,
                "itemsProcessing": itemsProcessing,
                "feedStatus": feedStatus,
                "feedDate": feedDate,
                "batchId": batchId,
                "modifiedDtm": modifiedDtm,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["feedId"]) -> MetaOapg.properties.feedId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["feedSource"]) -> MetaOapg.properties.feedSource: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["feedType"]) -> MetaOapg.properties.feedType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["partnerId"]) -> MetaOapg.properties.partnerId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["itemsReceived"]) -> MetaOapg.properties.itemsReceived: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["itemsSucceeded"]) -> MetaOapg.properties.itemsSucceeded: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["itemsFailed"]) -> MetaOapg.properties.itemsFailed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["itemsProcessing"]) -> MetaOapg.properties.itemsProcessing: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["feedStatus"]) -> MetaOapg.properties.feedStatus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["feedDate"]) -> MetaOapg.properties.feedDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["batchId"]) -> MetaOapg.properties.batchId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["modifiedDtm"]) -> MetaOapg.properties.modifiedDtm: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["feedId", "feedSource", "feedType", "partnerId", "itemsReceived", "itemsSucceeded", "itemsFailed", "itemsProcessing", "feedStatus", "feedDate", "batchId", "modifiedDtm", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["feedId"]) -> typing.Union[MetaOapg.properties.feedId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["feedSource"]) -> typing.Union[MetaOapg.properties.feedSource, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["feedType"]) -> typing.Union[MetaOapg.properties.feedType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["partnerId"]) -> typing.Union[MetaOapg.properties.partnerId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["itemsReceived"]) -> typing.Union[MetaOapg.properties.itemsReceived, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["itemsSucceeded"]) -> typing.Union[MetaOapg.properties.itemsSucceeded, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["itemsFailed"]) -> typing.Union[MetaOapg.properties.itemsFailed, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["itemsProcessing"]) -> typing.Union[MetaOapg.properties.itemsProcessing, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["feedStatus"]) -> typing.Union[MetaOapg.properties.feedStatus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["feedDate"]) -> typing.Union[MetaOapg.properties.feedDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["batchId"]) -> typing.Union[MetaOapg.properties.batchId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["modifiedDtm"]) -> typing.Union[MetaOapg.properties.modifiedDtm, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["feedId", "feedSource", "feedType", "partnerId", "itemsReceived", "itemsSucceeded", "itemsFailed", "itemsProcessing", "feedStatus", "feedDate", "batchId", "modifiedDtm", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        feedId: typing.Union[MetaOapg.properties.feedId, str, schemas.Unset] = schemas.unset,
        feedSource: typing.Union[MetaOapg.properties.feedSource, str, schemas.Unset] = schemas.unset,
        feedType: typing.Union[MetaOapg.properties.feedType, str, schemas.Unset] = schemas.unset,
        partnerId: typing.Union[MetaOapg.properties.partnerId, str, schemas.Unset] = schemas.unset,
        itemsReceived: typing.Union[MetaOapg.properties.itemsReceived, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        itemsSucceeded: typing.Union[MetaOapg.properties.itemsSucceeded, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        itemsFailed: typing.Union[MetaOapg.properties.itemsFailed, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        itemsProcessing: typing.Union[MetaOapg.properties.itemsProcessing, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        feedStatus: typing.Union[MetaOapg.properties.feedStatus, str, schemas.Unset] = schemas.unset,
        feedDate: typing.Union[MetaOapg.properties.feedDate, str, datetime, schemas.Unset] = schemas.unset,
        batchId: typing.Union[MetaOapg.properties.batchId, str, schemas.Unset] = schemas.unset,
        modifiedDtm: typing.Union[MetaOapg.properties.modifiedDtm, str, datetime, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'FeedRecordResponseResultsItem':
        return super().__new__(
            cls,
            *args,
            feedId=feedId,
            feedSource=feedSource,
            feedType=feedType,
            partnerId=partnerId,
            itemsReceived=itemsReceived,
            itemsSucceeded=itemsSucceeded,
            itemsFailed=itemsFailed,
            itemsProcessing=itemsProcessing,
            feedStatus=feedStatus,
            feedDate=feedDate,
            batchId=batchId,
            modifiedDtm=modifiedDtm,
            _configuration=_configuration,
            **kwargs,
        )
