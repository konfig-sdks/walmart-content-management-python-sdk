# coding: utf-8

"""
    Content Management

    The content management feed allows you to process content for items in bulk. You can take in content via the content feeds. Use the XSDs to manage content.

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from walmart_content_management_python_sdk import schemas  # noqa: F401


class PartnerFeedResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def errors() -> typing.Type['PartnerFeedResponseErrors']:
                return PartnerFeedResponseErrors
            feedId = schemas.StrSchema
            
            
            class feedStatus(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def RECEIVED(cls):
                    return cls("RECEIVED")
                
                @schemas.classproperty
                def INPROGRESS(cls):
                    return cls("INPROGRESS")
                
                @schemas.classproperty
                def PROCESSED(cls):
                    return cls("PROCESSED")
                
                @schemas.classproperty
                def ERROR(cls):
                    return cls("ERROR")
        
            @staticmethod
            def ingestionErrors() -> typing.Type['PartnerFeedResponseIngestionErrors']:
                return PartnerFeedResponseIngestionErrors
            itemsReceived = schemas.Int32Schema
            itemsSucceeded = schemas.Int32Schema
            itemsFailed = schemas.Int32Schema
            itemsProcessing = schemas.Int32Schema
            offset = schemas.Int32Schema
            limit = schemas.Int32Schema
        
            @staticmethod
            def itemDetails() -> typing.Type['PartnerFeedResponseItemDetails']:
                return PartnerFeedResponseItemDetails
            __annotations__ = {
                "errors": errors,
                "feedId": feedId,
                "feedStatus": feedStatus,
                "ingestionErrors": ingestionErrors,
                "itemsReceived": itemsReceived,
                "itemsSucceeded": itemsSucceeded,
                "itemsFailed": itemsFailed,
                "itemsProcessing": itemsProcessing,
                "offset": offset,
                "limit": limit,
                "itemDetails": itemDetails,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["errors"]) -> 'PartnerFeedResponseErrors': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["feedId"]) -> MetaOapg.properties.feedId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["feedStatus"]) -> MetaOapg.properties.feedStatus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ingestionErrors"]) -> 'PartnerFeedResponseIngestionErrors': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["itemsReceived"]) -> MetaOapg.properties.itemsReceived: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["itemsSucceeded"]) -> MetaOapg.properties.itemsSucceeded: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["itemsFailed"]) -> MetaOapg.properties.itemsFailed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["itemsProcessing"]) -> MetaOapg.properties.itemsProcessing: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["offset"]) -> MetaOapg.properties.offset: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["limit"]) -> MetaOapg.properties.limit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["itemDetails"]) -> 'PartnerFeedResponseItemDetails': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["errors", "feedId", "feedStatus", "ingestionErrors", "itemsReceived", "itemsSucceeded", "itemsFailed", "itemsProcessing", "offset", "limit", "itemDetails", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["errors"]) -> typing.Union['PartnerFeedResponseErrors', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["feedId"]) -> typing.Union[MetaOapg.properties.feedId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["feedStatus"]) -> typing.Union[MetaOapg.properties.feedStatus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ingestionErrors"]) -> typing.Union['PartnerFeedResponseIngestionErrors', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["itemsReceived"]) -> typing.Union[MetaOapg.properties.itemsReceived, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["itemsSucceeded"]) -> typing.Union[MetaOapg.properties.itemsSucceeded, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["itemsFailed"]) -> typing.Union[MetaOapg.properties.itemsFailed, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["itemsProcessing"]) -> typing.Union[MetaOapg.properties.itemsProcessing, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["offset"]) -> typing.Union[MetaOapg.properties.offset, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["limit"]) -> typing.Union[MetaOapg.properties.limit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["itemDetails"]) -> typing.Union['PartnerFeedResponseItemDetails', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["errors", "feedId", "feedStatus", "ingestionErrors", "itemsReceived", "itemsSucceeded", "itemsFailed", "itemsProcessing", "offset", "limit", "itemDetails", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        errors: typing.Union['PartnerFeedResponseErrors', schemas.Unset] = schemas.unset,
        feedId: typing.Union[MetaOapg.properties.feedId, str, schemas.Unset] = schemas.unset,
        feedStatus: typing.Union[MetaOapg.properties.feedStatus, str, schemas.Unset] = schemas.unset,
        ingestionErrors: typing.Union['PartnerFeedResponseIngestionErrors', schemas.Unset] = schemas.unset,
        itemsReceived: typing.Union[MetaOapg.properties.itemsReceived, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        itemsSucceeded: typing.Union[MetaOapg.properties.itemsSucceeded, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        itemsFailed: typing.Union[MetaOapg.properties.itemsFailed, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        itemsProcessing: typing.Union[MetaOapg.properties.itemsProcessing, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        offset: typing.Union[MetaOapg.properties.offset, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        limit: typing.Union[MetaOapg.properties.limit, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        itemDetails: typing.Union['PartnerFeedResponseItemDetails', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PartnerFeedResponse':
        return super().__new__(
            cls,
            *args,
            errors=errors,
            feedId=feedId,
            feedStatus=feedStatus,
            ingestionErrors=ingestionErrors,
            itemsReceived=itemsReceived,
            itemsSucceeded=itemsSucceeded,
            itemsFailed=itemsFailed,
            itemsProcessing=itemsProcessing,
            offset=offset,
            limit=limit,
            itemDetails=itemDetails,
            _configuration=_configuration,
            **kwargs,
        )

from walmart_content_management_python_sdk.model.partner_feed_response_errors import PartnerFeedResponseErrors
from walmart_content_management_python_sdk.model.partner_feed_response_ingestion_errors import PartnerFeedResponseIngestionErrors
from walmart_content_management_python_sdk.model.partner_feed_response_item_details import PartnerFeedResponseItemDetails
