# coding: utf-8

"""
    Content Management

    The content management feed allows you to process content for items in bulk. You can take in content via the content feeds. Use the XSDs to manage content.

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from pydantic import RootModel
from walmart_content_management_python_sdk.request_before_hook import request_before_hook
import json
from urllib3._collections import HTTPHeaderDict

from walmart_content_management_python_sdk.api_response import AsyncGeneratorResponse
from walmart_content_management_python_sdk import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from walmart_content_management_python_sdk import schemas  # noqa: F401

from walmart_content_management_python_sdk.model.feeds_create_content_feed_response import FeedsCreateContentFeedResponse as FeedsCreateContentFeedResponseSchema
from walmart_content_management_python_sdk.model.feeds_create_content_feed_request import FeedsCreateContentFeedRequest as FeedsCreateContentFeedRequestSchema

from walmart_content_management_python_sdk.type.feeds_create_content_feed_request import FeedsCreateContentFeedRequest
from walmart_content_management_python_sdk.type.feeds_create_content_feed_response import FeedsCreateContentFeedResponse

from ...api_client import Dictionary
from walmart_content_management_python_sdk.pydantic.feeds_create_content_feed_response import FeedsCreateContentFeedResponse as FeedsCreateContentFeedResponsePydantic
from walmart_content_management_python_sdk.pydantic.feeds_create_content_feed_request import FeedsCreateContentFeedRequest as FeedsCreateContentFeedRequestPydantic

# Query params
FeedTypeSchema = schemas.StrSchema
RequestRequiredQueryParams = typing_extensions.TypedDict(
    'RequestRequiredQueryParams',
    {
        'feedType': typing.Union[FeedTypeSchema, str, ],
    }
)
RequestOptionalQueryParams = typing_extensions.TypedDict(
    'RequestOptionalQueryParams',
    {
    },
    total=False
)


class RequestQueryParams(RequestRequiredQueryParams, RequestOptionalQueryParams):
    pass


request_query_feed_type = api_client.QueryParameter(
    name="feedType",
    style=api_client.ParameterStyle.FORM,
    schema=FeedTypeSchema,
    required=True,
    explode=True,
)
# Header params
WMCONSUMERCHANNELTYPESchema = schemas.StrSchema
WMQOSCORRELATIONIDSchema = schemas.StrSchema
WMSVCNAMESchema = schemas.StrSchema
WMSECTIMESTAMPSchema = schemas.StrSchema
WMSECAUTHSIGNATURESchema = schemas.StrSchema
WMCONSUMERIDSchema = schemas.StrSchema
RequestRequiredHeaderParams = typing_extensions.TypedDict(
    'RequestRequiredHeaderParams',
    {
        'WM_QOS.CORRELATION_ID': typing.Union[WMQOSCORRELATIONIDSchema, str, ],
        'WM_SVC.NAME': typing.Union[WMSVCNAMESchema, str, ],
        'WM_SEC.TIMESTAMP': typing.Union[WMSECTIMESTAMPSchema, str, ],
        'WM_SEC.AUTH_SIGNATURE': typing.Union[WMSECAUTHSIGNATURESchema, str, ],
        'WM_CONSUMER.ID': typing.Union[WMCONSUMERIDSchema, str, ],
    }
)
RequestOptionalHeaderParams = typing_extensions.TypedDict(
    'RequestOptionalHeaderParams',
    {
        'WM_CONSUMER.CHANNEL.TYPE': typing.Union[WMCONSUMERCHANNELTYPESchema, str, ],
    },
    total=False
)


class RequestHeaderParams(RequestRequiredHeaderParams, RequestOptionalHeaderParams):
    pass


request_header_wm_consumer_channel_type = api_client.HeaderParameter(
    name="WM_CONSUMER.CHANNEL.TYPE",
    style=api_client.ParameterStyle.SIMPLE,
    schema=WMCONSUMERCHANNELTYPESchema,
)
request_header_wm_qos_correlation_id = api_client.HeaderParameter(
    name="WM_QOS.CORRELATION_ID",
    style=api_client.ParameterStyle.SIMPLE,
    schema=WMQOSCORRELATIONIDSchema,
    required=True,
)
request_header_wm_svc_name = api_client.HeaderParameter(
    name="WM_SVC.NAME",
    style=api_client.ParameterStyle.SIMPLE,
    schema=WMSVCNAMESchema,
    required=True,
)
request_header_wm_sec_timestamp = api_client.HeaderParameter(
    name="WM_SEC.TIMESTAMP",
    style=api_client.ParameterStyle.SIMPLE,
    schema=WMSECTIMESTAMPSchema,
    required=True,
)
request_header_wm_sec_auth_signature = api_client.HeaderParameter(
    name="WM_SEC.AUTH_SIGNATURE",
    style=api_client.ParameterStyle.SIMPLE,
    schema=WMSECAUTHSIGNATURESchema,
    required=True,
)
request_header_wm_consumer_id = api_client.HeaderParameter(
    name="WM_CONSUMER.ID",
    style=api_client.ParameterStyle.SIMPLE,
    schema=WMCONSUMERIDSchema,
    required=True,
)
# body param
SchemaForRequestBodyMultipartFormData = FeedsCreateContentFeedRequestSchema


request_body_feeds_create_content_feed_request = api_client.RequestBody(
    content={
        'multipart/form-data': api_client.MediaType(
            schema=SchemaForRequestBodyMultipartFormData),
    },
)
SchemaFor200ResponseBodyApplicationXml = FeedsCreateContentFeedResponseSchema


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    body: FeedsCreateContentFeedResponse


@dataclass
class ApiResponseFor200Async(api_client.AsyncApiResponse):
    body: FeedsCreateContentFeedResponse


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    response_cls_async=ApiResponseFor200Async,
    content={
        'application/xml': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationXml),
    },
)
_all_accept_content_types = (
    'application/xml',
)


class BaseApi(api_client.Api):

    def _create_content_feed_mapped_args(
        self,
        feed_type: str,
        wm_qos_correlation_id: str,
        wm_svc_name: str,
        wm_sec_timestamp: str,
        wm_sec_auth_signature: str,
        wm_consumer_id: str,
        file: typing.IO,
        wm_consumer_channel_type: typing.Optional[str] = None,
    ) -> api_client.MappedArgs:
        args: api_client.MappedArgs = api_client.MappedArgs()
        _query_params = {}
        _header_params = {}
        _body = {}
        if file is not None:
            _body["file"] = file
        args.body = _body
        if feed_type is not None:
            _query_params["feedType"] = feed_type
        if wm_consumer_channel_type is not None:
            _header_params["WM_CONSUMER.CHANNEL.TYPE"] = wm_consumer_channel_type
        if wm_qos_correlation_id is not None:
            _header_params["WM_QOS.CORRELATION_ID"] = wm_qos_correlation_id
        if wm_svc_name is not None:
            _header_params["WM_SVC.NAME"] = wm_svc_name
        if wm_sec_timestamp is not None:
            _header_params["WM_SEC.TIMESTAMP"] = wm_sec_timestamp
        if wm_sec_auth_signature is not None:
            _header_params["WM_SEC.AUTH_SIGNATURE"] = wm_sec_auth_signature
        if wm_consumer_id is not None:
            _header_params["WM_CONSUMER.ID"] = wm_consumer_id
        args.query = _query_params
        args.header = _header_params
        return args

    async def _acreate_content_feed_oapg(
        self,
        body: typing.Any = None,
            query_params: typing.Optional[dict] = {},
            header_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        content_type: str = 'multipart/form-data',
        stream: bool = False,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        """
        Content feeds
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        self._verify_typed_dict_inputs_oapg(RequestHeaderParams, header_params)
        used_path = path.value
    
        prefix_separator_iterator = None
        for parameter in (
            request_query_feed_type,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value
    
        _headers = HTTPHeaderDict()
        for parameter in (
            request_header_wm_consumer_channel_type,
            request_header_wm_qos_correlation_id,
            request_header_wm_svc_name,
            request_header_wm_sec_timestamp,
            request_header_wm_sec_auth_signature,
            request_header_wm_consumer_id,
        ):
            parameter_data = header_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _headers.extend(serialized_data)
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'post'.upper()
        _headers.add('Content-Type', content_type)
    
        _fields = None
        _body = None
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/v3/feeds',
            body=body,
            auth_settings=_auth,
            headers=_headers,
        )
        if body is not schemas.unset:
            serialized_data = request_body_feeds_create_content_feed_request.serialize(body, content_type)
            if 'fields' in serialized_data:
                _fields = serialized_data['fields']
            elif 'body' in serialized_data:
                _body = serialized_data['body']
    
        response = await self.api_client.async_call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            fields=_fields,
            serialized_body=_body,
            body=body,
            auth_settings=_auth,
            prefix_separator_iterator=prefix_separator_iterator,
            timeout=timeout,
            **kwargs
        )
    
        if stream:
            if not 200 <= response.http_response.status <= 299:
                body = (await response.http_response.content.read()).decode("utf-8")
                raise exceptions.ApiStreamingException(
                    status=response.http_response.status,
                    reason=response.http_response.reason,
                    body=body,
                )
    
            async def stream_iterator():
                """
                iterates over response.http_response.content and closes connection once iteration has finished
                """
                async for line in response.http_response.content:
                    if line == b'\r\n':
                        continue
                    yield line
                response.http_response.close()
                await response.session.close()
            return AsyncGeneratorResponse(
                content=stream_iterator(),
                headers=response.http_response.headers,
                status=response.http_response.status,
                response=response.http_response
            )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = await response_for_status.deserialize_async(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserializationAsync(
                body=await response.http_response.json() if is_json else await response.http_response.text(),
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        # cleanup session / response
        response.http_response.close()
        await response.session.close()
    
        return api_response


    def _create_content_feed_oapg(
        self,
        body: typing.Any = None,
            query_params: typing.Optional[dict] = {},
            header_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        content_type: str = 'multipart/form-data',
        stream: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        """
        Content feeds
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        self._verify_typed_dict_inputs_oapg(RequestHeaderParams, header_params)
        used_path = path.value
    
        prefix_separator_iterator = None
        for parameter in (
            request_query_feed_type,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value
    
        _headers = HTTPHeaderDict()
        for parameter in (
            request_header_wm_consumer_channel_type,
            request_header_wm_qos_correlation_id,
            request_header_wm_svc_name,
            request_header_wm_sec_timestamp,
            request_header_wm_sec_auth_signature,
            request_header_wm_consumer_id,
        ):
            parameter_data = header_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _headers.extend(serialized_data)
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'post'.upper()
        _headers.add('Content-Type', content_type)
    
        _fields = None
        _body = None
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/v3/feeds',
            body=body,
            auth_settings=_auth,
            headers=_headers,
        )
        if body is not schemas.unset:
            serialized_data = request_body_feeds_create_content_feed_request.serialize(body, content_type)
            if 'fields' in serialized_data:
                _fields = serialized_data['fields']
            elif 'body' in serialized_data:
                _body = serialized_data['body']
    
        response = self.api_client.call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            fields=_fields,
            serialized_body=_body,
            body=body,
            auth_settings=_auth,
            prefix_separator_iterator=prefix_separator_iterator,
            timeout=timeout,
        )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = response_for_status.deserialize(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserialization(
                body=json.loads(response.http_response.data) if is_json else response.http_response.data,
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        return api_response


class CreateContentFeedRaw(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    async def acreate_content_feed(
        self,
        feed_type: str,
        wm_qos_correlation_id: str,
        wm_svc_name: str,
        wm_sec_timestamp: str,
        wm_sec_auth_signature: str,
        wm_consumer_id: str,
        file: typing.IO,
        wm_consumer_channel_type: typing.Optional[str] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._create_content_feed_mapped_args(
            feed_type=feed_type,
            wm_qos_correlation_id=wm_qos_correlation_id,
            wm_svc_name=wm_svc_name,
            wm_sec_timestamp=wm_sec_timestamp,
            wm_sec_auth_signature=wm_sec_auth_signature,
            wm_consumer_id=wm_consumer_id,
            file=file,
            wm_consumer_channel_type=wm_consumer_channel_type,
        )
        return await self._acreate_content_feed_oapg(
            body=args.body,
            query_params=args.query,
            header_params=args.header,
            **kwargs,
        )
    
    def create_content_feed(
        self,
        feed_type: str,
        wm_qos_correlation_id: str,
        wm_svc_name: str,
        wm_sec_timestamp: str,
        wm_sec_auth_signature: str,
        wm_consumer_id: str,
        file: typing.IO,
        wm_consumer_channel_type: typing.Optional[str] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._create_content_feed_mapped_args(
            feed_type=feed_type,
            wm_qos_correlation_id=wm_qos_correlation_id,
            wm_svc_name=wm_svc_name,
            wm_sec_timestamp=wm_sec_timestamp,
            wm_sec_auth_signature=wm_sec_auth_signature,
            wm_consumer_id=wm_consumer_id,
            file=file,
            wm_consumer_channel_type=wm_consumer_channel_type,
        )
        return self._create_content_feed_oapg(
            body=args.body,
            query_params=args.query,
            header_params=args.header,
        )

class CreateContentFeed(BaseApi):

    async def acreate_content_feed(
        self,
        feed_type: str,
        wm_qos_correlation_id: str,
        wm_svc_name: str,
        wm_sec_timestamp: str,
        wm_sec_auth_signature: str,
        wm_consumer_id: str,
        file: typing.IO,
        wm_consumer_channel_type: typing.Optional[str] = None,
        validate: bool = False,
        **kwargs,
    ) -> FeedsCreateContentFeedResponsePydantic:
        raw_response = await self.raw.acreate_content_feed(
            feed_type=feed_type,
            wm_qos_correlation_id=wm_qos_correlation_id,
            wm_svc_name=wm_svc_name,
            wm_sec_timestamp=wm_sec_timestamp,
            wm_sec_auth_signature=wm_sec_auth_signature,
            wm_consumer_id=wm_consumer_id,
            file=file,
            wm_consumer_channel_type=wm_consumer_channel_type,
            **kwargs,
        )
        if validate:
            return FeedsCreateContentFeedResponsePydantic(**raw_response.body)
        return api_client.construct_model_instance(FeedsCreateContentFeedResponsePydantic, raw_response.body)
    
    
    def create_content_feed(
        self,
        feed_type: str,
        wm_qos_correlation_id: str,
        wm_svc_name: str,
        wm_sec_timestamp: str,
        wm_sec_auth_signature: str,
        wm_consumer_id: str,
        file: typing.IO,
        wm_consumer_channel_type: typing.Optional[str] = None,
        validate: bool = False,
    ) -> FeedsCreateContentFeedResponsePydantic:
        raw_response = self.raw.create_content_feed(
            feed_type=feed_type,
            wm_qos_correlation_id=wm_qos_correlation_id,
            wm_svc_name=wm_svc_name,
            wm_sec_timestamp=wm_sec_timestamp,
            wm_sec_auth_signature=wm_sec_auth_signature,
            wm_consumer_id=wm_consumer_id,
            file=file,
            wm_consumer_channel_type=wm_consumer_channel_type,
        )
        if validate:
            return FeedsCreateContentFeedResponsePydantic(**raw_response.body)
        return api_client.construct_model_instance(FeedsCreateContentFeedResponsePydantic, raw_response.body)


class ApiForpost(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    async def apost(
        self,
        feed_type: str,
        wm_qos_correlation_id: str,
        wm_svc_name: str,
        wm_sec_timestamp: str,
        wm_sec_auth_signature: str,
        wm_consumer_id: str,
        file: typing.IO,
        wm_consumer_channel_type: typing.Optional[str] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._create_content_feed_mapped_args(
            feed_type=feed_type,
            wm_qos_correlation_id=wm_qos_correlation_id,
            wm_svc_name=wm_svc_name,
            wm_sec_timestamp=wm_sec_timestamp,
            wm_sec_auth_signature=wm_sec_auth_signature,
            wm_consumer_id=wm_consumer_id,
            file=file,
            wm_consumer_channel_type=wm_consumer_channel_type,
        )
        return await self._acreate_content_feed_oapg(
            body=args.body,
            query_params=args.query,
            header_params=args.header,
            **kwargs,
        )
    
    def post(
        self,
        feed_type: str,
        wm_qos_correlation_id: str,
        wm_svc_name: str,
        wm_sec_timestamp: str,
        wm_sec_auth_signature: str,
        wm_consumer_id: str,
        file: typing.IO,
        wm_consumer_channel_type: typing.Optional[str] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._create_content_feed_mapped_args(
            feed_type=feed_type,
            wm_qos_correlation_id=wm_qos_correlation_id,
            wm_svc_name=wm_svc_name,
            wm_sec_timestamp=wm_sec_timestamp,
            wm_sec_auth_signature=wm_sec_auth_signature,
            wm_consumer_id=wm_consumer_id,
            file=file,
            wm_consumer_channel_type=wm_consumer_channel_type,
        )
        return self._create_content_feed_oapg(
            body=args.body,
            query_params=args.query,
            header_params=args.header,
        )

